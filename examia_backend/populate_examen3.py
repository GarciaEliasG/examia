import os
import sys
import django
from datetime import datetime, timedelta

# --- CONFIGURACI√ìN DJANGO ---
current_dir = os.path.dirname(os.path.abspath(__file__))
parent_dir = os.path.dirname(current_dir)
sys.path.append(parent_dir)

os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'examia_backend.settings')

try:
    django.setup()
except Exception as e:
    print(f"Error configurando Django: {e}")
    sys.exit(1)

from django.contrib.auth import get_user_model
from examia_backend.models import *


def populate_examen_parcial_ia_test():
    """Crea un examen nuevo con 5 preguntas distintas para probar Groq IA"""
    print("\n" + "=" * 65)
    print("üöÄ Creando EXAMEN PARCIAL IA-TEST...")
    print("=" * 65)

    # 1Ô∏è‚É£ Obtener alumno
    try:
        User = get_user_model()
        alumno_user = User.objects.get(username='JoacoT')
        alumno = Alumno.objects.get(usuario=alumno_user)
        print("‚úì Alumno JoacoT encontrado")
    except (User.DoesNotExist, Alumno.DoesNotExist):
        print("‚ùå No se encontr√≥ el alumno JoacoT. Ejecuta primero populate_data.py")
        return

    # 2Ô∏è‚É£ Obtener profesor-curso (Matem√°tica I o el que exista)
    try:
        profesor_curso = ProfesorCurso.objects.get(curso__nombre='Matem√°tica I')
        print(f"‚úì Profesor-curso: {profesor_curso.profesor.nombre} - {profesor_curso.curso.nombre}")
    except ProfesorCurso.DoesNotExist:
        print("‚ùå No se encontr√≥ profesor-curso para Matem√°tica I")
        return

    # 3Ô∏è‚É£ Eliminar examen existente si ya hab√≠a uno con el mismo nombre
    try:
        examen_existente = Examen.objects.get(titulo='EXAMEN PARCIAL IA-TEST')
        examen_existente.delete()
        print("üóëÔ∏è Examen previo 'EXAMEN PARCIAL IA-TEST' eliminado")
    except Examen.DoesNotExist:
        print("‚úì No hab√≠a examen previo con ese nombre")

    # 4Ô∏è‚É£ Crear examen nuevo
    examen = Examen.objects.create(
        profesor_curso=profesor_curso,
        titulo='EXAMEN PARCIAL IA-TEST',
        descripcion='Examen con 5 preguntas variadas para testear correcci√≥n IA Groq.',
        fecha_limite=datetime.now() + timedelta(days=10)
    )
    print("‚úì Examen creado correctamente")

    # 5Ô∏è‚É£ Crear 5 preguntas variadas
    preguntas_data = [
        {
            'enunciado': '¬øCu√°l es el valor de œÄ (pi) aproximado a dos decimales?',
            'tipo': 'multiple_choice',
            'puntaje': 1.0,
            'opciones': ['3.14', '3.15', '3.13', '3.12'],
            'orden': 1,
        },
        {
            'enunciado': 'Resuelve la expresi√≥n: (8 √ó 5) ‚àí (4 √ó 7)',
            'tipo': 'texto',
            'puntaje': 1.5,
            'opciones': None,
            'orden': 2,
        },
        {
            'enunciado': 'Define qu√© es una ecuaci√≥n cuadr√°tica y da un ejemplo.',
            'tipo': 'desarrollo',
            'puntaje': 2.0,
            'opciones': None,
            'orden': 3,
        },
        {
            'enunciado': 'Selecciona la unidad de medida de energ√≠a en el Sistema Internacional:',
            'tipo': 'multiple_choice',
            'puntaje': 1.0,
            'opciones': ['Joule', 'Watt', 'Newton', 'Voltio'],
            'orden': 4,
        },
        {
            'enunciado': 'Explica brevemente la diferencia entre velocidad y aceleraci√≥n.',
            'tipo': 'desarrollo',
            'puntaje': 2.5,
            'opciones': None,
            'orden': 5,
        }
    ]

    for i, p in enumerate(preguntas_data, start=1):
        Pregunta.objects.create(
            examen=examen,
            enunciado=p['enunciado'],
            tipo=p['tipo'],
            puntaje=p['puntaje'],
            opciones=p['opciones'],
            orden=p['orden']
        )
        print(f"‚úì Pregunta {i} creada ({p['tipo']})")

    # 6Ô∏è‚É£ Crear relaci√≥n examen-alumno (estado activo)
    examen_alumno = ExamenAlumno.objects.create(
        alumno=alumno,
        examen=examen,
        estado='activo',
        fecha_realizacion=None,
        calificacion_final=None,
        retroalimentacion='',
        tiempo_utilizado=0
    )
    print("‚úì Relaci√≥n Examen-Alumno creada con estado ACTIVO")

    # 7Ô∏è‚É£ Resumen final
    print("\n" + "=" * 65)
    print("üéâ ¬°EXAMEN PARCIAL IA-TEST creado con √©xito!")
    print("=" * 65)
    print(f"üìò Examen: {examen.titulo}")
    print(f"üìÖ Fecha l√≠mite: {examen.fecha_limite.strftime('%d/%m/%Y')}")
    print(f"‚ùì Preguntas: {len(preguntas_data)}")
    print(f"üéØ Alumno: {alumno.nombre}")
    print(f"üî∞ Estado inicial: {examen_alumno.estado}")
    print(f"   ‚Ä¢ calificaci√≥n_final: {examen_alumno.calificacion_final}")
    print(f"   ‚Ä¢ fecha_realizacion: {examen_alumno.fecha_realizacion}")

    activos = ExamenAlumno.objects.filter(alumno=alumno, estado='activo').count()
    print(f"\nüìä Ex√°menes activos del alumno: {activos}")
    print("‚úÖ Listo para probar finalizaci√≥n y correcci√≥n autom√°tica con Groq IA")


def main():
    try:
        populate_examen_parcial_ia_test()
    except Exception as e:
        print(f"‚ùå Error durante la poblaci√≥n: {e}")
        import traceback
        traceback.print_exc()


if __name__ == '__main__':
    main()
