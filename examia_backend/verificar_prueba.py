import os
import sys
import django
from datetime import datetime, timedelta

# Agregar el directorio padre al path de Python
current_dir = os.path.dirname(os.path.abspath(__file__))
parent_dir = os.path.dirname(current_dir)
sys.path.append(parent_dir)

# Configurar el entorno Django
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'examia_backend.settings')

try:
    django.setup()
except Exception as e:
    print(f"Error configurando Django: {e}")
    sys.exit(1)

from django.contrib.auth import get_user_model
from examia_backend.models import *

def populate_examen_prueba():
    """Poblar un examen de PRUEBA con nombre espec√≠fico"""
    print("\n" + "="*60)
    print("Creando EXAMEN PRUEBA1...")
    print("="*60)
    
    # 1. Obtener el alumno JoacoT
    try:
        User = get_user_model()
        alumno_user = User.objects.get(username='JoacoT')
        alumno = Alumno.objects.get(usuario=alumno_user)
        print("‚úì Alumno JoacoT encontrado")
    except (User.DoesNotExist, Alumno.DoesNotExist):
        print("‚ùå No se encontr√≥ el alumno JoacoT. Ejecuta primero populate_data.py")
        return

    # 2. Obtener profesor y curso de Matem√°tica I
    try:
        profesor_curso = ProfesorCurso.objects.get(curso__nombre='Matem√°tica I')
        print(f"‚úì Profesor-curso encontrado: {profesor_curso.profesor.nombre} - {profesor_curso.curso.nombre}")
    except ProfesorCurso.DoesNotExist:
        print("‚ùå No se encontr√≥ profesor-curso para Matem√°tica I")
        return

    # 3. ELIMINAR examen existente si existe
    try:
        examen_existente = Examen.objects.get(titulo='EXAMEN PRUEBA1')
        examen_existente.delete()
        print("‚úì Examen existente eliminado")
    except Examen.DoesNotExist:
        print("‚úì No hab√≠a examen existente")

    # 4. Crear el examen de PRUEBA
    examen_prueba = Examen.objects.create(
        profesor_curso=profesor_curso,
        titulo='EXAMEN PRUEBA1',  # ‚úÖ NOMBRE ESPEC√çFICO
        descripcion='Examen de prueba para verificar el flujo completo',
        fecha_limite=datetime.now() + timedelta(days=7),  # 7 d√≠as para probar
    )
    print("‚úì Examen creado: 'EXAMEN PRUEBA1'")

    # 5. Crear preguntas SIMPLES
    preguntas_data = [
        {
            'enunciado': '¬øCu√°l es la capital de Argentina?',
            'tipo': 'multiple_choice',
            'puntaje': 1.0,
        },
        {
            'enunciado': 'Explica brevemente qu√© es una funci√≥n matem√°tica.',
            'tipo': 'desarrollo', 
            'puntaje': 2.0,
        },
        {
            'enunciado': '¬ø2 + 2 = ?',
            'tipo': 'texto',
            'puntaje': 1.0,
        }
    ]

    for i, pregunta_data in enumerate(preguntas_data, 1):
        Pregunta.objects.create(
            examen=examen_prueba,
            enunciado=pregunta_data['enunciado'],
            tipo=pregunta_data['tipo'],
            puntaje=pregunta_data['puntaje'],
        )
        print(f"‚úì Pregunta {i} creada: {pregunta_data['tipo']}")

    # 6. Crear relaci√≥n examen-alumno CON CONFIGURACI√ìN PARA ESTADO ACTIVO
    examen_alumno = ExamenAlumno.objects.create(
        alumno=alumno,
        examen=examen_prueba,
        # CONFIGURACI√ìN PARA QUE SEA ACTIVO:
        calificacion_final=None,      # ‚úÖ DEBE ser None
        retroalimentacion='',         # ‚úÖ DEBE estar vac√≠o
    )
    
    # Si el campo estado existe, configurarlo expl√≠citamente
    if hasattr(examen_alumno, 'estado'):
        examen_alumno.estado = 'activo'
        examen_alumno.save()
        print("‚úì Estado configurado expl√≠citamente a 'activo'")
    
    print("‚úì Relaci√≥n alumno-examen creada")

    # 7. Resumen final
    print("\n" + "="*60)
    print("¬°EXAMEN PRUEBA1 CREADO EXITOSAMENTE!")
    print("="*60)
    print(f"üìö Examen: {examen_prueba.titulo}")
    print(f"üìÖ Vence: {examen_prueba.fecha_limite.strftime('%d/%m/%Y')}")
    print(f"‚ùì Preguntas: 3")
    print(f"üéØ Alumno: {alumno.nombre}")
    print(f"üî∞ Configuraci√≥n para estado ACTIVO:")
    print(f"   ‚Ä¢ calificacion_final: {examen_alumno.calificacion_final}")
    print(f"   ‚Ä¢ retroalimentacion: '{examen_alumno.retroalimentacion}'")
    if hasattr(examen_alumno, 'estado'):
        print(f"   ‚Ä¢ estado: {examen_alumno.estado}")
    print("\nüí° Ahora verifica en el frontend si aparece como ACTIVA")

def main():
    """Funci√≥n principal"""
    try:
        populate_examen_prueba()
    except Exception as e:
        print(f"‚ùå Error durante la poblaci√≥n: {e}")
        import traceback
        traceback.print_exc()

if __name__ == '__main__':
    main()